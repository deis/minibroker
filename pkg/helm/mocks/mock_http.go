// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubernetes-sigs/minibroker/pkg/helm (interfaces: HttpGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockHttpGetter is a mock of HttpGetter interface
type MockHttpGetter struct {
	ctrl     *gomock.Controller
	recorder *MockHttpGetterMockRecorder
}

// MockHttpGetterMockRecorder is the mock recorder for MockHttpGetter
type MockHttpGetterMockRecorder struct {
	mock *MockHttpGetter
}

// NewMockHttpGetter creates a new mock instance
func NewMockHttpGetter(ctrl *gomock.Controller) *MockHttpGetter {
	mock := &MockHttpGetter{ctrl: ctrl}
	mock.recorder = &MockHttpGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpGetter) EXPECT() *MockHttpGetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockHttpGetter) Get(arg0 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockHttpGetterMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttpGetter)(nil).Get), arg0)
}
