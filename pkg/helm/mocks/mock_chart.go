// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubernetes-sigs/minibroker/pkg/helm (interfaces: ChartLoader,ChartHelmClientProvider,HelmClientInstallRunner,HelmClientUninstallRunner)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	helm "github.com/kubernetes-sigs/minibroker/pkg/helm"
	chart "helm.sh/helm/v3/pkg/chart"
	release "helm.sh/helm/v3/pkg/release"
	reflect "reflect"
)

// MockChartLoader is a mock of ChartLoader interface
type MockChartLoader struct {
	ctrl     *gomock.Controller
	recorder *MockChartLoaderMockRecorder
}

// MockChartLoaderMockRecorder is the mock recorder for MockChartLoader
type MockChartLoaderMockRecorder struct {
	mock *MockChartLoader
}

// NewMockChartLoader creates a new mock instance
func NewMockChartLoader(ctrl *gomock.Controller) *MockChartLoader {
	mock := &MockChartLoader{ctrl: ctrl}
	mock.recorder = &MockChartLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChartLoader) EXPECT() *MockChartLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockChartLoader) Load(arg0 string) (*chart.Chart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(*chart.Chart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockChartLoaderMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockChartLoader)(nil).Load), arg0)
}

// MockChartHelmClientProvider is a mock of ChartHelmClientProvider interface
type MockChartHelmClientProvider struct {
	ctrl     *gomock.Controller
	recorder *MockChartHelmClientProviderMockRecorder
}

// MockChartHelmClientProviderMockRecorder is the mock recorder for MockChartHelmClientProvider
type MockChartHelmClientProviderMockRecorder struct {
	mock *MockChartHelmClientProvider
}

// NewMockChartHelmClientProvider creates a new mock instance
func NewMockChartHelmClientProvider(ctrl *gomock.Controller) *MockChartHelmClientProvider {
	mock := &MockChartHelmClientProvider{ctrl: ctrl}
	mock.recorder = &MockChartHelmClientProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChartHelmClientProvider) EXPECT() *MockChartHelmClientProviderMockRecorder {
	return m.recorder
}

// ProvideInstaller mocks base method
func (m *MockChartHelmClientProvider) ProvideInstaller(arg0, arg1 string) (helm.HelmClientInstallRunner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvideInstaller", arg0, arg1)
	ret0, _ := ret[0].(helm.HelmClientInstallRunner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvideInstaller indicates an expected call of ProvideInstaller
func (mr *MockChartHelmClientProviderMockRecorder) ProvideInstaller(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvideInstaller", reflect.TypeOf((*MockChartHelmClientProvider)(nil).ProvideInstaller), arg0, arg1)
}

// ProvideUninstaller mocks base method
func (m *MockChartHelmClientProvider) ProvideUninstaller(arg0 string) (helm.HelmClientUninstallRunner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvideUninstaller", arg0)
	ret0, _ := ret[0].(helm.HelmClientUninstallRunner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvideUninstaller indicates an expected call of ProvideUninstaller
func (mr *MockChartHelmClientProviderMockRecorder) ProvideUninstaller(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvideUninstaller", reflect.TypeOf((*MockChartHelmClientProvider)(nil).ProvideUninstaller), arg0)
}

// MockHelmClientInstallRunner is a mock of HelmClientInstallRunner interface
type MockHelmClientInstallRunner struct {
	ctrl     *gomock.Controller
	recorder *MockHelmClientInstallRunnerMockRecorder
}

// MockHelmClientInstallRunnerMockRecorder is the mock recorder for MockHelmClientInstallRunner
type MockHelmClientInstallRunnerMockRecorder struct {
	mock *MockHelmClientInstallRunner
}

// NewMockHelmClientInstallRunner creates a new mock instance
func NewMockHelmClientInstallRunner(ctrl *gomock.Controller) *MockHelmClientInstallRunner {
	mock := &MockHelmClientInstallRunner{ctrl: ctrl}
	mock.recorder = &MockHelmClientInstallRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelmClientInstallRunner) EXPECT() *MockHelmClientInstallRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockHelmClientInstallRunner) Run(arg0 *chart.Chart, arg1 map[string]interface{}) (*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockHelmClientInstallRunnerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHelmClientInstallRunner)(nil).Run), arg0, arg1)
}

// MockHelmClientUninstallRunner is a mock of HelmClientUninstallRunner interface
type MockHelmClientUninstallRunner struct {
	ctrl     *gomock.Controller
	recorder *MockHelmClientUninstallRunnerMockRecorder
}

// MockHelmClientUninstallRunnerMockRecorder is the mock recorder for MockHelmClientUninstallRunner
type MockHelmClientUninstallRunnerMockRecorder struct {
	mock *MockHelmClientUninstallRunner
}

// NewMockHelmClientUninstallRunner creates a new mock instance
func NewMockHelmClientUninstallRunner(ctrl *gomock.Controller) *MockHelmClientUninstallRunner {
	mock := &MockHelmClientUninstallRunner{ctrl: ctrl}
	mock.recorder = &MockHelmClientUninstallRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelmClientUninstallRunner) EXPECT() *MockHelmClientUninstallRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockHelmClientUninstallRunner) Run(arg0 string) (*release.UninstallReleaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(*release.UninstallReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockHelmClientUninstallRunnerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHelmClientUninstallRunner)(nil).Run), arg0)
}
