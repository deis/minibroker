// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubernetes-sigs/minibroker/pkg/helm/testutil (interfaces: ChartInstallRunner,ChartUninstallRunner)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	chart "helm.sh/helm/v3/pkg/chart"
	release "helm.sh/helm/v3/pkg/release"
	reflect "reflect"
)

// MockChartInstallRunner is a mock of ChartInstallRunner interface
type MockChartInstallRunner struct {
	ctrl     *gomock.Controller
	recorder *MockChartInstallRunnerMockRecorder
}

// MockChartInstallRunnerMockRecorder is the mock recorder for MockChartInstallRunner
type MockChartInstallRunnerMockRecorder struct {
	mock *MockChartInstallRunner
}

// NewMockChartInstallRunner creates a new mock instance
func NewMockChartInstallRunner(ctrl *gomock.Controller) *MockChartInstallRunner {
	mock := &MockChartInstallRunner{ctrl: ctrl}
	mock.recorder = &MockChartInstallRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChartInstallRunner) EXPECT() *MockChartInstallRunnerMockRecorder {
	return m.recorder
}

// ChartInstallRunner mocks base method
func (m *MockChartInstallRunner) ChartInstallRunner(arg0 *chart.Chart, arg1 map[string]interface{}) (*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChartInstallRunner", arg0, arg1)
	ret0, _ := ret[0].(*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChartInstallRunner indicates an expected call of ChartInstallRunner
func (mr *MockChartInstallRunnerMockRecorder) ChartInstallRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChartInstallRunner", reflect.TypeOf((*MockChartInstallRunner)(nil).ChartInstallRunner), arg0, arg1)
}

// MockChartUninstallRunner is a mock of ChartUninstallRunner interface
type MockChartUninstallRunner struct {
	ctrl     *gomock.Controller
	recorder *MockChartUninstallRunnerMockRecorder
}

// MockChartUninstallRunnerMockRecorder is the mock recorder for MockChartUninstallRunner
type MockChartUninstallRunnerMockRecorder struct {
	mock *MockChartUninstallRunner
}

// NewMockChartUninstallRunner creates a new mock instance
func NewMockChartUninstallRunner(ctrl *gomock.Controller) *MockChartUninstallRunner {
	mock := &MockChartUninstallRunner{ctrl: ctrl}
	mock.recorder = &MockChartUninstallRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChartUninstallRunner) EXPECT() *MockChartUninstallRunnerMockRecorder {
	return m.recorder
}

// ChartUninstallRunner mocks base method
func (m *MockChartUninstallRunner) ChartUninstallRunner(arg0 string) (*release.UninstallReleaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChartUninstallRunner", arg0)
	ret0, _ := ret[0].(*release.UninstallReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChartUninstallRunner indicates an expected call of ChartUninstallRunner
func (mr *MockChartUninstallRunnerMockRecorder) ChartUninstallRunner(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChartUninstallRunner", reflect.TypeOf((*MockChartUninstallRunner)(nil).ChartUninstallRunner), arg0)
}
